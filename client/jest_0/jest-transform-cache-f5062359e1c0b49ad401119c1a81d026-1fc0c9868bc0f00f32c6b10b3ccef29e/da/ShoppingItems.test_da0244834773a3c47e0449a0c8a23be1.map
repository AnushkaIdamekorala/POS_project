{"version":3,"sources":["ShoppingItems.test.js"],"names":["middlewares","thunk","Enzyme","configure","adapter","Adapter","describe","mockStore","store","loginUser","sinon","spy","userCarts","initialState","item","items","cart","cartItems","beforeEach","it","wrapper","expect","toMatchSnapshot"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;AAEA,MAAMA,WAAW,GAAG,CAACC,mBAAD,CAApB;;AAEAC,gBAAOC,SAAP,CAAiB;AAAEC,EAAAA,OAAO,EAAE,IAAIC,2BAAJ;AAAX,CAAjB;;AAEAC,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BA,EAAAA,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChC,UAAMC,SAAS,GAAG,6BAAeP,WAAf,CAAlB;AACA,QAAIQ,KAAJ;;AACA,UAAMC,SAAS,GAAGC,eAAMC,GAAN,EAAlB;;AACA,UAAMC,SAAS,GAAGF,eAAMC,GAAN,EAAlB;;AAEA,UAAME,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAE;AADH,OADa;AAInBC,MAAAA,IAAI,EAAE;AACJC,QAAAA,SAAS,EAAE;AADP;AAJa,KAArB;AASAC,IAAAA,UAAU,CAAC,MAAM;AACfV,MAAAA,KAAK,GAAGD,SAAS,CAACM,YAAD,CAAjB;AACD,KAFS,CAAV;AAGAM,IAAAA,EAAE,CAAC,sCAAD,EAAyC,MAAM;AAC/C;;;AAGA,YAAMC,OAAO,GAAG,mBACd,6BAAC,oBAAD;AAAU,QAAA,KAAK,EAAEZ,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADc,CAAhB;AAKAa,MAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBE,eAAhB;AACD,KAVC,CAAF;AAYA;;;;;;;;AAQD,GAtCO,CAAR;AAuCD,CAxCO,CAAR","sourcesContent":["import React from \"react\";\nimport Enzyme, { shallow, mount } from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\nimport ShoppingItems from \"../components/ShoppingItems\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport sinon from \"sinon\";\n\nimport configureStore from \"redux-mock-store\";\n\nconst middlewares = [thunk];\n\nEnzyme.configure({ adapter: new Adapter() });\n\ndescribe(\"components\", () => {\n  describe(\"Login component\", () => {\n    const mockStore = configureStore(middlewares);\n    let store;\n    const loginUser = sinon.spy();\n    const userCarts = sinon.spy();\n\n    const initialState = {\n      item: {\n        items: []\n      },\n      cart: {\n        cartItems: []\n      }\n    };\n\n    beforeEach(() => {\n      store = mockStore(initialState);\n    });\n    it(\"should render self and subcomponents\", () => {\n      /* const props = {\n        login: jest.fn()\n      }; */\n      const wrapper = mount(\n        <Provider store={store}>\n          <ShoppingItems />\n        </Provider>\n      );\n      expect(wrapper).toMatchSnapshot();\n    });\n\n    /* it(\"simulate button action\", () => {\n      const wrapper = mount(\n        <Provider store={store}>\n          <ShoppingItems />\n        </Provider>\n      );\n      \n    });*/\n  });\n});\n"]}