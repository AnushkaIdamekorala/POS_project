5d0ed9cf951f47cbb48caf30698afccd
"use strict";

var _interopRequireWildcard = require("/home/anushkai/Desktop/Training/code/redux/fullStack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/anushkai/Desktop/Training/code/redux/fullStack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var actions = _interopRequireWildcard(require("./userActions"));

var types = _interopRequireWildcard(require("./types"));

var _expect = _interopRequireDefault(require("expect"));

var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));

var _moxios = _interopRequireDefault(require("moxios"));

const middlewares = [_reduxThunk.default];
const mockStore = (0, _reduxMockStore.default)(middlewares);
describe("loginUser userActions", () => {
  beforeEach(function () {
    _moxios.default.install();
  });
  afterEach(function () {
    _moxios.default.uninstall();
  });
  test("correctly", () => {
    let expectedJson = {
      success: true
    };

    _moxios.default.wait(() => {
      const request = _moxios.default.requests.mostRecent();

      request.respondWith({
        status: 200,
        response: expectedJson
      });
    });

    const expectedActions = [{
      payload: expectedJson,
      type: types.USER_LOGIN
    }];
    const store = mockStore({
      isAuthenticated: false,
      cartSet: [],
      isAuthFailed: false,
      isSignFail: false,
      isSignWell: false
    });
    let details = {
      username: "test@test.com",
      password: "1234"
    };
    return store.dispatch(actions.loginUser(details)).then(() => {
      // return of async actions
      (0, _expect.default)(store.getActions()).toEqual(expectedActions);
    });
  });
});
describe("signOutUser userActions", () => {
  beforeEach(function () {
    _moxios.default.install();
  });
  afterEach(function () {
    _moxios.default.uninstall();
  });
  test("correctly", () => {
    let expectedJson = {
      success: true
    };

    _moxios.default.wait(() => {
      const request = _moxios.default.requests.mostRecent();

      request.respondWith({
        status: 200,
        response: expectedJson
      });
    });

    const expectedActions = [{
      payload: expectedJson,
      type: types.USER_SIGN_OUT
    }];
    const store = mockStore({
      isAuthenticated: false,
      cartSet: [],
      isAuthFailed: false,
      isSignFail: false,
      isSignWell: false
    });
    return store.dispatch(actions.signOutUser()).then(() => {
      // return of async actions
      (0, _expect.default)(store.getActions()).toEqual(expectedActions);
    });
  });
});
describe("checkAuth userActions", () => {
  beforeEach(function () {
    _moxios.default.install();
  });
  afterEach(function () {
    _moxios.default.uninstall();
  });
  test("correctly", () => {
    let expectedJson = {
      success: true
    };

    _moxios.default.wait(() => {
      const request = _moxios.default.requests.mostRecent();

      request.respondWith({
        status: 200,
        response: expectedJson
      });
    });

    const expectedActions = [{
      payload: expectedJson.success,
      type: types.AUTH_CHECK
    }];
    const store = mockStore({
      isAuthenticated: false,
      cartSet: [],
      isAuthFailed: false,
      isSignFail: false,
      isSignWell: false
    });
    return store.dispatch(actions.checkAuth()).then(() => {
      // return of async actions
      (0, _expect.default)(store.getActions()).toEqual(expectedActions);
    });
  });
});
describe("removeCart userActions", () => {
  beforeEach(function () {
    _moxios.default.install();
  });
  afterEach(function () {
    _moxios.default.uninstall();
  });
  test("correctly", () => {
    let expectedJson = {
      success: true
    };

    _moxios.default.wait(() => {
      const request = _moxios.default.requests.mostRecent();

      request.respondWith({
        status: 200,
        response: expectedJson
      });
    });

    let id = "2423a3c3b3de23ab32";
    const expectedActions = [{
      payload: id,
      type: types.REMOVE_CART
    }];
    const store = mockStore({
      isAuthenticated: false,
      cartSet: [],
      isAuthFailed: false,
      isSignFail: false,
      isSignWell: false
    });
    return store.dispatch(actions.removeCart(id)).then(() => {
      // return of async actions
      (0, _expect.default)(store.getActions()).toEqual(expectedActions);
    });
  });
});
describe("signupUser userActions", () => {
  beforeEach(function () {
    _moxios.default.install();
  });
  afterEach(function () {
    _moxios.default.uninstall();
  });
  test("correctly", () => {
    let expectedJson = {
      success: true
    };

    _moxios.default.wait(() => {
      const request = _moxios.default.requests.mostRecent();

      request.respondWith({
        status: 200,
        response: expectedJson
      });
    });

    const expectedActions = [{
      payload: expectedJson,
      type: types.USER_SIGNUP
    }];
    const store = mockStore({
      isAuthenticated: false,
      cartSet: [],
      isAuthFailed: false,
      isSignFail: false,
      isSignWell: false
    });
    let details = {
      username: "test@test.com",
      password: "1234"
    };
    return store.dispatch(actions.signupUser(details)).then(() => {
      // return of async actions
      (0, _expect.default)(store.getActions()).toEqual(expectedActions);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,