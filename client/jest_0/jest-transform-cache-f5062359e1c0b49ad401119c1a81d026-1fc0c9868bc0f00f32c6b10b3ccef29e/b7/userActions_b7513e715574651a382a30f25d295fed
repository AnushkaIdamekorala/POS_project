f5a2dac8141d7794d5984b5293d3aaa5
"use strict";

var _interopRequireDefault = require("/home/anushkai/Desktop/Training/code/redux/fullStack/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signupUser = exports.removeCart = exports.createCart = exports.userCarts = exports.checkAuth = exports.signOutUser = exports.userRefresh = exports.loginUser = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _types = require("./types");

const loginUser = details => dispatch => {
  return _axios.default.post("/api/user/login", details).then(res => dispatch({
    type: _types.USER_LOGIN,
    payload: res.data
  })).catch(res => dispatch({
    type: _types.USER_NOT_FOUND,
    payload: res.data
  }));
};

exports.loginUser = loginUser;

const userRefresh = () => dispatch => {
  dispatch({
    type: _types.USER_REFRESH
  });
};

exports.userRefresh = userRefresh;

const signOutUser = () => dispatch => {
  return _axios.default.get("/api/user/signout").then(res => dispatch({
    type: _types.USER_SIGN_OUT,
    payload: res.data
  }));
};

exports.signOutUser = signOutUser;

const checkAuth = () => dispatch => {
  return _axios.default.post("/api/user/checkAuth").then(res => dispatch({
    type: _types.AUTH_CHECK,
    payload: res.data.success
  }));
};

exports.checkAuth = checkAuth;

const userCarts = () => dispatch => {
  return _axios.default.get("/api/user/what").then(res => dispatch({
    type: _types.USER_CARTS,
    payload: res.data.info
  }));
};

exports.userCarts = userCarts;

const createCart = table => dispatch => {
  return _axios.default.get(`/api/user/create/${table}`).then(res => dispatch({
    type: _types.CREATE_CART,
    payload: res.data
  }));
};

exports.createCart = createCart;

const removeCart = id => dispatch => {
  return _axios.default.delete(`/api/user/removecart/${id}`).then(res => {
    if (res.data.success) {
      dispatch({
        type: _types.REMOVE_CART,
        payload: id
      });
    } else {}
  });
};

exports.removeCart = removeCart;

const signupUser = details => dispatch => {
  return _axios.default.post("/api/user/signup", details).then(res => dispatch({
    type: _types.USER_SIGNUP,
    payload: res.data
  })).catch(res => dispatch({
    type: _types.INVALID_EMAIL
  }));
};
/*
{
      console.log(res);
      if (res.data.message === "Mail exists") {
        dispatch({
          type: MAIL_EXIST
        });
      } else {
        dispatch({
        type: INVALID_EMAIL
      })
       
      }
    }*/


exports.signupUser = signupUser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJBY3Rpb25zLmpzIl0sIm5hbWVzIjpbImxvZ2luVXNlciIsImRldGFpbHMiLCJkaXNwYXRjaCIsImF4aW9zIiwicG9zdCIsInRoZW4iLCJyZXMiLCJ0eXBlIiwiVVNFUl9MT0dJTiIsInBheWxvYWQiLCJkYXRhIiwiY2F0Y2giLCJVU0VSX05PVF9GT1VORCIsInVzZXJSZWZyZXNoIiwiVVNFUl9SRUZSRVNIIiwic2lnbk91dFVzZXIiLCJnZXQiLCJVU0VSX1NJR05fT1VUIiwiY2hlY2tBdXRoIiwiQVVUSF9DSEVDSyIsInN1Y2Nlc3MiLCJ1c2VyQ2FydHMiLCJVU0VSX0NBUlRTIiwiaW5mbyIsImNyZWF0ZUNhcnQiLCJ0YWJsZSIsIkNSRUFURV9DQVJUIiwicmVtb3ZlQ2FydCIsImlkIiwiZGVsZXRlIiwiUkVNT1ZFX0NBUlQiLCJzaWdudXBVc2VyIiwiVVNFUl9TSUdOVVAiLCJJTlZBTElEX0VNQUlMIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFjTyxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sSUFBSUMsUUFBUSxJQUFJO0FBQzlDLFNBQU9DLGVBQ0pDLElBREksQ0FDQyxpQkFERCxFQUNvQkgsT0FEcEIsRUFFSkksSUFGSSxDQUVDQyxHQUFHLElBQ1BKLFFBQVEsQ0FBQztBQUNQSyxJQUFBQSxJQUFJLEVBQUVDLGlCQURDO0FBRVBDLElBQUFBLE9BQU8sRUFBRUgsR0FBRyxDQUFDSTtBQUZOLEdBQUQsQ0FITCxFQVFKQyxLQVJJLENBUUVMLEdBQUcsSUFDUkosUUFBUSxDQUFDO0FBQ1BLLElBQUFBLElBQUksRUFBRUsscUJBREM7QUFFUEgsSUFBQUEsT0FBTyxFQUFFSCxHQUFHLENBQUNJO0FBRk4sR0FBRCxDQVRMLENBQVA7QUFjRCxDQWZNOzs7O0FBaUJBLE1BQU1HLFdBQVcsR0FBRyxNQUFNWCxRQUFRLElBQUk7QUFDM0NBLEVBQUFBLFFBQVEsQ0FBQztBQUNQSyxJQUFBQSxJQUFJLEVBQUVPO0FBREMsR0FBRCxDQUFSO0FBR0QsQ0FKTTs7OztBQU1BLE1BQU1DLFdBQVcsR0FBRyxNQUFNYixRQUFRLElBQUk7QUFDM0MsU0FBT0MsZUFBTWEsR0FBTixDQUFVLG1CQUFWLEVBQStCWCxJQUEvQixDQUFvQ0MsR0FBRyxJQUM1Q0osUUFBUSxDQUFDO0FBQ1BLLElBQUFBLElBQUksRUFBRVUsb0JBREM7QUFFUFIsSUFBQUEsT0FBTyxFQUFFSCxHQUFHLENBQUNJO0FBRk4sR0FBRCxDQURILENBQVA7QUFNRCxDQVBNOzs7O0FBU0EsTUFBTVEsU0FBUyxHQUFHLE1BQU1oQixRQUFRLElBQUk7QUFDekMsU0FBT0MsZUFBTUMsSUFBTixDQUFXLHFCQUFYLEVBQWtDQyxJQUFsQyxDQUF1Q0MsR0FBRyxJQUMvQ0osUUFBUSxDQUFDO0FBQ1BLLElBQUFBLElBQUksRUFBRVksaUJBREM7QUFFUFYsSUFBQUEsT0FBTyxFQUFFSCxHQUFHLENBQUNJLElBQUosQ0FBU1U7QUFGWCxHQUFELENBREgsQ0FBUDtBQU1ELENBUE07Ozs7QUFTQSxNQUFNQyxTQUFTLEdBQUcsTUFBTW5CLFFBQVEsSUFBSTtBQUN6QyxTQUFPQyxlQUFNYSxHQUFOLENBQVUsZ0JBQVYsRUFBNEJYLElBQTVCLENBQWlDQyxHQUFHLElBQ3pDSixRQUFRLENBQUM7QUFDUEssSUFBQUEsSUFBSSxFQUFFZSxpQkFEQztBQUVQYixJQUFBQSxPQUFPLEVBQUVILEdBQUcsQ0FBQ0ksSUFBSixDQUFTYTtBQUZYLEdBQUQsQ0FESCxDQUFQO0FBTUQsQ0FQTTs7OztBQVNBLE1BQU1DLFVBQVUsR0FBR0MsS0FBSyxJQUFJdkIsUUFBUSxJQUFJO0FBQzdDLFNBQU9DLGVBQU1hLEdBQU4sQ0FBVyxvQkFBbUJTLEtBQU0sRUFBcEMsRUFBdUNwQixJQUF2QyxDQUE0Q0MsR0FBRyxJQUNwREosUUFBUSxDQUFDO0FBQ1BLLElBQUFBLElBQUksRUFBRW1CLGtCQURDO0FBRVBqQixJQUFBQSxPQUFPLEVBQUVILEdBQUcsQ0FBQ0k7QUFGTixHQUFELENBREgsQ0FBUDtBQU1ELENBUE07Ozs7QUFTQSxNQUFNaUIsVUFBVSxHQUFHQyxFQUFFLElBQUkxQixRQUFRLElBQUk7QUFDMUMsU0FBT0MsZUFBTTBCLE1BQU4sQ0FBYyx3QkFBdUJELEVBQUcsRUFBeEMsRUFBMkN2QixJQUEzQyxDQUFnREMsR0FBRyxJQUFJO0FBQzVELFFBQUlBLEdBQUcsQ0FBQ0ksSUFBSixDQUFTVSxPQUFiLEVBQXNCO0FBQ3BCbEIsTUFBQUEsUUFBUSxDQUFDO0FBQ1BLLFFBQUFBLElBQUksRUFBRXVCLGtCQURDO0FBRVByQixRQUFBQSxPQUFPLEVBQUVtQjtBQUZGLE9BQUQsQ0FBUjtBQUlELEtBTEQsTUFLTyxDQUNOO0FBQ0YsR0FSTSxDQUFQO0FBU0QsQ0FWTTs7OztBQVlBLE1BQU1HLFVBQVUsR0FBRzlCLE9BQU8sSUFBSUMsUUFBUSxJQUFJO0FBQy9DLFNBQU9DLGVBQ0pDLElBREksQ0FDQyxrQkFERCxFQUNxQkgsT0FEckIsRUFFSkksSUFGSSxDQUVDQyxHQUFHLElBQ1BKLFFBQVEsQ0FBQztBQUNQSyxJQUFBQSxJQUFJLEVBQUV5QixrQkFEQztBQUVQdkIsSUFBQUEsT0FBTyxFQUFFSCxHQUFHLENBQUNJO0FBRk4sR0FBRCxDQUhMLEVBUUpDLEtBUkksQ0FRRUwsR0FBRyxJQUNSSixRQUFRLENBQUM7QUFDUEssSUFBQUEsSUFBSSxFQUFFMEI7QUFEQyxHQUFELENBVEwsQ0FBUDtBQWFELENBZE07QUFnQlAiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQge1xuICBVU0VSX0xPR0lOLFxuICBVU0VSX05PVF9GT1VORCxcbiAgVVNFUl9SRUZSRVNILFxuICBVU0VSX1NJR05fT1VULFxuICBBVVRIX0NIRUNLLFxuICBVU0VSX0NBUlRTLFxuICBDUkVBVEVfQ0FSVCxcbiAgVVNFUl9TSUdOVVAsXG4gIE1BSUxfRVhJU1QsXG4gIElOVkFMSURfRU1BSUwsXG4gIFJFTU9WRV9DQVJUXG59IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCBsb2dpblVzZXIgPSBkZXRhaWxzID0+IGRpc3BhdGNoID0+IHtcbiAgcmV0dXJuIGF4aW9zXG4gICAgLnBvc3QoXCIvYXBpL3VzZXIvbG9naW5cIiwgZGV0YWlscylcbiAgICAudGhlbihyZXMgPT5cbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogVVNFUl9MT0dJTixcbiAgICAgICAgcGF5bG9hZDogcmVzLmRhdGFcbiAgICAgIH0pXG4gICAgKVxuICAgIC5jYXRjaChyZXMgPT5cbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogVVNFUl9OT1RfRk9VTkQsXG4gICAgICAgIHBheWxvYWQ6IHJlcy5kYXRhXG4gICAgICB9KVxuICAgICk7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlclJlZnJlc2ggPSAoKSA9PiBkaXNwYXRjaCA9PiB7XG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBVU0VSX1JFRlJFU0hcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2lnbk91dFVzZXIgPSAoKSA9PiBkaXNwYXRjaCA9PiB7XG4gIHJldHVybiBheGlvcy5nZXQoXCIvYXBpL3VzZXIvc2lnbm91dFwiKS50aGVuKHJlcyA9PlxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IFVTRVJfU0lHTl9PVVQsXG4gICAgICBwYXlsb2FkOiByZXMuZGF0YVxuICAgIH0pXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgY2hlY2tBdXRoID0gKCkgPT4gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4gYXhpb3MucG9zdChcIi9hcGkvdXNlci9jaGVja0F1dGhcIikudGhlbihyZXMgPT5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBVVRIX0NIRUNLLFxuICAgICAgcGF5bG9hZDogcmVzLmRhdGEuc3VjY2Vzc1xuICAgIH0pXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlckNhcnRzID0gKCkgPT4gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4gYXhpb3MuZ2V0KFwiL2FwaS91c2VyL3doYXRcIikudGhlbihyZXMgPT5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBVU0VSX0NBUlRTLFxuICAgICAgcGF5bG9hZDogcmVzLmRhdGEuaW5mb1xuICAgIH0pXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlQ2FydCA9IHRhYmxlID0+IGRpc3BhdGNoID0+IHtcbiAgcmV0dXJuIGF4aW9zLmdldChgL2FwaS91c2VyL2NyZWF0ZS8ke3RhYmxlfWApLnRoZW4ocmVzID0+XG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQ1JFQVRFX0NBUlQsXG4gICAgICBwYXlsb2FkOiByZXMuZGF0YVxuICAgIH0pXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlQ2FydCA9IGlkID0+IGRpc3BhdGNoID0+IHtcbiAgcmV0dXJuIGF4aW9zLmRlbGV0ZShgL2FwaS91c2VyL3JlbW92ZWNhcnQvJHtpZH1gKS50aGVuKHJlcyA9PiB7XG4gICAgaWYgKHJlcy5kYXRhLnN1Y2Nlc3MpIHtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogUkVNT1ZFX0NBUlQsXG4gICAgICAgIHBheWxvYWQ6IGlkXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgIH1cbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2lnbnVwVXNlciA9IGRldGFpbHMgPT4gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4gYXhpb3NcbiAgICAucG9zdChcIi9hcGkvdXNlci9zaWdudXBcIiwgZGV0YWlscylcbiAgICAudGhlbihyZXMgPT5cbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogVVNFUl9TSUdOVVAsXG4gICAgICAgIHBheWxvYWQ6IHJlcy5kYXRhXG4gICAgICB9KVxuICAgIClcbiAgICAuY2F0Y2gocmVzID0+XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IElOVkFMSURfRU1BSUxcbiAgICAgIH0pXG4gICAgKTtcbn07XG5cbi8qXG57XG4gICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgaWYgKHJlcy5kYXRhLm1lc3NhZ2UgPT09IFwiTWFpbCBleGlzdHNcIikge1xuICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogTUFJTF9FWElTVFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogSU5WQUxJRF9FTUFJTFxuICAgICAgfSlcbiAgICAgICBcbiAgICAgIH1cbiAgICB9Ki9cbiJdfQ==